// Generated by CoffeeScript 1.3.3

define(["underscore", "jquery", "Chain"], function(_, $, Chain) {
  var Board;
  Board = (function() {

    Board.EMPTY = 0;

    Board.BLACK = 1;

    Board.WHITE = 2;

    Board.CURRENT_STONE = Board.BLACK;

    function Board(size) {
      var get_this;
      this.size = size;
      this.EMPTY = 0;
      this.BLACK = 1;
      this.WHITE = 2;
      this.CURRENT_STONE = this.BLACK;
      this.KO_POINT = [];
      if (typeof this.size !== "number") {
        this.size = 0;
      }
      get_this = this;
      this.virtual_board = new Array(this.size);
      _.each(_.range(this.size), function(i) {
        get_this.virtual_board[i] = new Array(get_this.size);
        return _.each(_.range(get_this.size), function(j) {
          return get_this.virtual_board[i][j] = get_this.EMPTY;
        });
      });
      return;
    }

    Board.prototype.get_neighbors = function(_point) {
      var neighbours, _x, _y;
      _x = _point[0];
      _y = _point[1];
      neighbours = [];
      if (_x > 0) {
        neighbours.push([_x - 1, _y]);
      }
      if (_x < this.size - 1) {
        neighbours.push([_x + 1, _y]);
      }
      if (_y > 0) {
        neighbours.push([_x, _y - 1]);
      }
      if (_y < this.size - 1) {
        neighbours.push([_x, _y + 1]);
      }
      return neighbours;
    };

    Board.prototype.get_color = function(_virtual_board, point) {
      var n_x, n_y;
      n_x = point[0];
      n_y = point[1];
      return _virtual_board[n_x][n_y];
    };

    Board.prototype.set_color = function(_virtual_board, point, _color) {
      var n_x, n_y;
      n_x = point[0];
      n_y = point[1];
      _virtual_board[n_x][n_y] = _color;
      return _virtual_board;
    };

    Board.prototype.get_opposite_color = function(_color) {
      var _color_opp;
      _color_opp = this.EMPTY;
      switch (_color) {
        case this.EMPTY:
          _color_opp = this.EMPTY;
          break;
        case this.WHITE:
          _color_opp = this.BLACK;
          break;
        case this.BLACK:
          _color_opp = this.WHITE;
          break;
        default:
          _color_opp = this.EMPTY;
      }
      return _color_opp;
    };

    Board.prototype.get_chain_points = function(_virtual_board, point) {
      var flood_fill_color, get_this, my_color, stones;
      stones = {};
      stones[point] = point;
      my_color = this.get_color(_virtual_board, point);
      flood_fill_color = this.get_opposite_color(my_color);
      _virtual_board = this.set_color(_virtual_board, point, flood_fill_color);
      get_this = this;
      _.each(this.get_neighbors(point), function(neighbor) {
        var n_color;
        n_color = get_this.get_color(_virtual_board, point);
        if (n_color === my_color) {
          if (!(_.contains(_.keys(stones), neighbor.toString()))) {
            return _.each(get_this.get_chain_points(_virtual_board, neighbor), function(_neighbor) {
              return stones[_neighbor] = _neighbor;
            });
          }
        }
      });
      return stones;
    };

    Board.prototype.get_chain = function(_virtual_board, point) {
      var get_this, liberties, stones, virtual_board_clone;
      virtual_board_clone = $.extend(true, [], _virtual_board);
      stones = this.get_chain_points(virtual_board_clone, point);
      liberties = {};
      get_this = this;
      _.each(stones, function(stone) {
        return _.each(get_this.get_neighbors(stone), function(point) {
          if (get_this.get_color(_virtual_board, point) === get_this.EMPTY) {
            return liberties[point] = point;
          }
        });
      });
      return new Chain(stones, liberties);
    };

    Board.prototype.move = function(_coord) {
      var capturedStones, get_this, move_results, point_color, suicide, virtual_board_clone, _x, _y;
      capturedStones = {};
      virtual_board_clone = $.extend(true, [], this.virtual_board);
      _x = _coord[0];
      _y = _coord[1];
      point_color = this.get_color(virtual_board_clone, _coord);
      move_results = {
        color: this.EMPTY,
        x: _x,
        y: _y,
        dead: []
      };
      if (point_color === this.EMPTY) {
        if (this.CURRENT_STONE === this.BLACK) {
          this.virtual_board = this.set_color(this.virtual_board, _coord, this.BLACK);
          move_results.color = this.BLACK;
          this.CURRENT_STONE = this.WHITE;
        } else {
          this.virtual_board = this.set_color(this.virtual_board, _coord, this.WHITE);
          move_results.color = this.WHITE;
          this.CURRENT_STONE = this.BLACK;
        }
      }
      return move_results;
      if (_x === this.KO_POINT[0] && _y === this.KO_POINT[1]) {
        return move_results;
      }
      if (point_color === this.EMPTY) {
        suicide = true;
        get_this = this;
        _.each(this.get_neighbors(_coord), function(neighbor) {
          var enemy, n_color;
          n_color = get_this.get_color(virtual_board_clone, neighbor);
          if (n_color === get_this.EMPTY) {
            return suicide = false;
          } else if (n_color === get_this.CURRENT_STONE) {
            if (!(get_this.get_chain(virtual_board_clone, neighbor).in_atari())) {
              return suicide = false;
            }
          } else if (n_color === get_this.get_opposite_color(get_this.CURRENT_STONE)) {
            enemy = get_this.get_chain(virtual_board_clone, neighbor);
            if (enemy.in_atari()) {
              suicide = false;
              return _.each(enemy.get_stones(), function(stone) {
                get_this.set_color(virtual_board_clone, stone, get_this.EMPTY);
                capturedStones[stone] = stone;
                return move_results.dead.push(stone);
              });
            }
          }
        });
        if (suicide) {
          return move_results;
        }
        if (this.CURRENT_STONE === this.BLACK) {
          virtual_board_clone = this.set_color(virtual_board_clone, _coord, this.BLACK);
          move_results.color = this.BLACK;
          this.CURRENT_STONE = this.WHITE;
        } else {
          virtual_board_clone = this.set_color(virtual_board_clone, _coord, this.WHITE);
          move_results.color = this.WHITE;
          this.CURRENT_STONE = this.BLACK;
        }
        if (_.size(capturedStones) === 1) {
          this.KO_POINT = capturedStones[_.keys(capturedStones)[0]];
        } else {
          this.KO_POINT = [];
        }
        this.virtual_board = virtual_board_clone;
      }
      return move_results;
    };

    return Board;

  })();
  return Board;
});
