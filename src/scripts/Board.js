// Generated by CoffeeScript 1.3.3

define(["underscore", "jquery", "Chain"], function(_, $, Chain) {
  var Board;
  Board = (function() {

    Board.EMPTY = 0;

    Board.BLACK = 1;

    Board.WHITE = 2;

    Board.CURRENT_STONE = Board.BLACK;

    function Board(size) {
      var get_this;
      this.size = size;
      this.EMPTY = 0;
      this.BLACK = 1;
      this.WHITE = 2;
      this.CURRENT_STONE = this.BLACK;
      this.KO_POINT = [];
      if (typeof this.size !== "number") {
        this.size = 0;
      }
      get_this = this;
      this.virtual_board = new Array(this.size);
      _.each(_.range(this.size), function(i) {
        get_this.virtual_board[i] = new Array(get_this.size);
        return _.each(_.range(get_this.size), function(j) {
          return get_this.virtual_board[i][j] = get_this.EMPTY;
        });
      });
      return;
    }

    Board.prototype.get_adjacent_points = function(_point) {
      var neighbours, _x, _y;
      _x = _point[0];
      _y = _point[1];
      neighbours = [];
      if (_x > 0) {
        neighbours.push([_x - 1, _y]);
      }
      if (_x < this.size - 1) {
        neighbours.push([_x + 1, _y]);
      }
      if (_y > 0) {
        neighbours.push([_x, _y - 1]);
      }
      if (_y < this.size - 1) {
        neighbours.push([_x, _y + 1]);
      }
      return neighbours;
    };

    Board.prototype.get_color = function(_virtual_board, point) {
      var n_x, n_y;
      n_x = point[0];
      n_y = point[1];
      return _virtual_board[n_x][n_y];
    };

    Board.prototype.set_color = function(_virtual_board, point, _color) {
      var n_x, n_y;
      n_x = point[0];
      n_y = point[1];
      _virtual_board[n_x][n_y] = _color;
      return _virtual_board;
    };

    Board.prototype.get_opposite_color = function(_color) {
      var _color_opp;
      _color_opp = this.EMPTY;
      switch (_color) {
        case this.EMPTY:
          _color_opp = this.EMPTY;
          break;
        case this.WHITE:
          _color_opp = this.BLACK;
          break;
        case this.BLACK:
          _color_opp = this.WHITE;
          break;
        default:
          _color_opp = this.EMPTY;
      }
      return _color_opp;
    };

    Board.prototype.get_chain = function(_coord) {
      var chain_info, current_color, fill_color, virtual_board_clone;
      chain_info = {
        liberties: {},
        chain_members: {}
      };
      current_color = this.get_color(this.virtual_board, _coord);
      if (current_color === this.EMPTY) {
        return chain_info;
      }
      fill_color = this.get_opposite_color(_coord);
      virtual_board_clone = $.extend(true, [], this.virtual_board);
    };

    Board.prototype.is_move_legal = function(_coord) {
      var adjacent_points, get_this, legal_results;
      adjacent_points = this.get_adjacent_points(_coord);
      get_this = this;
      _.each(adjacent_points, function(adjacent_point) {
        return get_this.get_chain(adjacent_point);
      });
      legal_results = {
        legal: true,
        dead: []
      };
      return legal_results;
    };

    Board.prototype.move = function(_coord) {
      var legal_results, move_results, point_color;
      move_results = {
        color: this.EMPTY,
        x: _coord[0],
        y: _coord[1],
        dead: []
      };
      legal_results = this.is_move_legal(_coord);
      if (legal_results.legal === true) {
        move_results.dead = $.extend(true, [], legal_results.dead);
      } else {
        return move_results;
      }
      point_color = this.get_color(this.virtual_board, _coord);
      if (point_color === this.EMPTY) {
        if (this.CURRENT_STONE === this.BLACK) {
          this.virtual_board = this.set_color(this.virtual_board, _coord, this.BLACK);
          move_results.color = this.BLACK;
          this.CURRENT_STONE = this.WHITE;
        } else {
          this.virtual_board = this.set_color(this.virtual_board, _coord, this.WHITE);
          move_results.color = this.WHITE;
          this.CURRENT_STONE = this.BLACK;
        }
      }
      return move_results;
    };

    return Board;

  })();
  return Board;
});
